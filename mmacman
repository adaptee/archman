#!/usr/bin/python

import os, sys
from time import time as utime
from random import choice, randint
from optparse import OptionParser, OptionGroup

from pyalpmm import Session, PyALPMMConfiguration, Events, System
from pyalpmm.transaction import SyncTransaction, RemoveTransaction, \
     UpgradeTransaction, AURTransaction, DatabaseUpdateTransaction, \
     SysUpgradeTransaction
from pyalpmm.tools import AskUser, CriticalError, FancyPackage, ProgressBar, \
     UserError, FancySize
from pyalpmm.pbuilder import PackageBuilder, BuildError
from pyalpmm.database import DatabaseError
from pyalpmm.item import PackageItem

import pyalpmm_raw as p

# debug WingIDE
#import wingdbstub

class MMacmanEvents(Events):
    def __init__(self):
        super(MMacmanEvents, self).__init__()
        self.progress_obj = None
        self.processed_pkgs = None
        self.active_pkg = None
        self.last_pkg = None
        self.line_dirty = False
        self.last_total_download = None

    def _clean_line(self, cleanup_text="\n"):
        if self.line_dirty:
            sys.stdout.write(cleanup_text)
            sys.stdout.flush()
            self.line_dirty = False

    def DatabaseUpToDate(self, **kw):
        print "[i] Database up to date: {0}".format(kw["repo"])

    def DatabaseUpdated(self, **kw):
        if self.progress_obj:
            self._clean_line("\r{0}\n".format(self.progress_obj.step_to_end()))
        print "[+] Database updated: {0}".format(kw["repo"])

    def DatabaseUpdateError(self, **kw):
        print "[e] Database could not be updated: {0}".format(kw["repo"])

    def StartResolvingDependencies(self):
        print "[i] Resolving Dependencies..."

    def StartCheckingInterConflicts(self):
        print "[i] Checking Inter-Conflicts..."

    def StartRetrievingPackages(self, **kw):
        self._clean_line()
        print "[+] Retrieving from {0}".format(kw["repo"])

    def StartUpgradingPackage(self, **kw):
        self._clean_line()
        self.progress_obj = None
        self.active_pkg = kw["pkg"]

    def StartRemovingPackage(self, **kw):
        self._clean_line()
        self.progress_obj = None
        self.active_pkg = kw["pkg"]

    def StartInstallingPackage(self, **kw):
        self._clean_line()
        self.progress_obj = None
        self.active_pkg = kw["pkg"]

    def DoneInstallingPackage(self, **kw):
        self._clean_line()

    def DoneRemovingPackage(self, **kw):
        self._clean_line()

    def DoneUpgradingPackage(self, **kw):
        self._clean_line()

    def StartCheckingPackageIntegrity(self):
        print "[i] Checking package integrity..."

    def StartCheckingFileConflicts(self):
        self.progress_obj = None
        pass

    def StartBuild(self, **kw):
        print "[+] Starting build: {0.name}-{0.version}".format(kw["pkg"])

    def ReInstallingPackage(self, **kw):
        print "[i] Reinstalling package: {0.name}-{0.version}".format(kw["pkg"])

    def _progress(self, operation, kw):
        if self.progress_obj is None:
            desc = "[i] {0} {1}".format(operation, kw["pkgname"])
            self.progress_obj = ProgressBar(100, desc)

        sys.stdout.write(self.progress_obj.step_to(kw["percent"]) + "\r")
        sys.stdout.flush()

        self.line_dirty = True

    def StartNewDownload(self, **kw):
        fn = filename = kw["filename"]

        self._clean_line()

        self.active_pkg = None
        # first catch db-info downloads
        if fn.endswith(".db.tar.gz"):
            self.active_pkg = fn
            size = None
            label = "[D] {0}".format(fn)
        # here a package is downloaded
        else:
            for name, pkg in self.processed_pkgs.items():
                if fn.find(name) == 0:
                    self.active_pkg = pkg
            size = int(pkg.size.raw)
            label = "[D] {0.name}-{0.version}".format(self.active_pkg)
            assert self.active_pkg is not None

        self.progress_obj = ProgressBar(size, label)

    def ProgressDownload(self, **kw):
        sys.stdout.write((self.progress_obj.step_to(kw["transfered"]) \
                          if self.progress_obj.endvalue \
                          else self.progress_obj.step_to(10)) + "\r")
        sys.stdout.flush()

        self.line_dirty = True

    def ProgressDownloadTotal(self, **kw):
        if self.last_total_download is None:
            sys.stdout.write("\n")
            sys.stdout.flush()

        self.processed_pkgs = dict((p.name, p) for p in kw["pkgs"])

    def ProgressInstall(self, **kw):
        self._progress("Installing:", kw)

    def ProgressRemove(self, **kw):
        self._progress("Removing:", kw)

    def ProgressUpgrade(self, **kw):
        self._progress("Upgrading:", kw)

    def ProgressConflict(self, **kw):
        self._progress("Checking File Conflicts:", kw)

    def ProcessingAURPackages(self, **kw):
        print "[i] Building the following AUR packages now!"
        for pkg in kw["add"]:
            print "    [i] {0}".format(pkg.name)

        print
        if AskUser("[?] Really continue (y/n)? ").answer == "n":
            raise UserError("User aborted/declined operation!")

    def ProcessingPackages(self, **kw):
        isize, size, rsize = 0, 0, 0

        print
        for which in ["remove", "add"]:
            if kw[which] is None or len(kw[which]) == 0:
                continue

            print {"remove": "[i] Removing the following packages:",
                   "add": "[i] Adding/Upgrading the following packages:"}[which]
            dashes = "-"*63
            print "+" + dashes + "+"
            for pkg in kw[which]:
                isize_obj = pkg.isize.rebuild(force_suffix="MB")
                size_obj = pkg.size.rebuild(force_suffix="MB")
                if which == "add":
                    isize += isize_obj.raw
                    size += size_obj.raw
                    show_size = "{0:>9} | {1:>9}".format(size_obj, isize_obj)
                else:
                    rsize += pkg.size.raw
                    show_size = "{0:>9}".format(size_obj)

                name = "| {0.name}-{0.version}".format(pkg)
                print "{0:40}{1:>23} |".format(name, show_size)
            print "+" + dashes + "+"

        if kw["add"] is not None and len(kw["add"]) != 0:
            print "[i] {0:38}{1:>9} | {2:>9}". \
                  format("Total download | install size:",
                         FancySize(size), FancySize(isize))

        if kw["remove"] is not None and len(kw["remove"]) != 0:
            print "[i] Total diskspace released:{0:>34}". \
                  format(FancySize(rsize))

        if AskUser("[?] Really continue (y/n)? ").answer == "n":
            raise UserError("User aborted/declined operation!")


#### ADD NO CONFIRM
#### ADD NO TRANSPARENCY


parser = OptionParser()
group = OptionGroup(parser, "General Options",
                    "Can be used standalone and in combination with any other options")
group.add_option("-y", "--update", dest="update", action="store_true",
                  help="Update all Databases (usable standalone, or in combination with everything)")
group.add_option("-c", "--configfile", dest="configfile", metavar="FILE",
                  help="use given file as a config file")
parser.add_option_group(group)


group = OptionGroup(parser, "Additional flags", "To be used in combination with other actions")
group.add_option("-f", "--force", dest="force", action="store_true",
                  help="force action")
group.add_option("-d", "--nodeps", dest="nodeps", action="store_true",
                  help="ignore dependencies")
group.add_option("-w", "--downloadonly", dest="download_only", action="store_true",
                  help="only download packages")
group.add_option("-i", "--info", dest="info", action="store_true",
                  help="Get info for some package. With -Q local and with -S from sync repo")
group.add_option("", "--no-confirm", dest="confirm", action="store_false",
                  help="Never ask the user for confirmation", default=True)
group.add_option("", "--no-transparency", dest="transparency",
                 action="store_false", default=True,
                 help="Do not try to transparently handle the AUR")


parser.add_option_group(group)

group = OptionGroup(parser, "Sync Actions",
                    "-S activates the sync actions")
group.add_option("-S", "--sync", dest="sync", action="store_true",
                  help="Synchronise package")
group.add_option("-u", "--sysupgrade", dest="sysupgrade", action="store_true",
                  help="Perform a global system upgrade")
group.add_option("-s", "--search", dest="search", action="store_true",
                  help="Search package in SyncDatabases")
parser.add_option_group(group)

group = OptionGroup(parser, "Upgrade Actions",
                    "-U activates the upgrade actions")
group.add_option("-U", "--upgrade", dest="upgrade", action="store_true",
                  help="Upgrade package")
parser.add_option_group(group)

group = OptionGroup(parser, "Query Actions",
                    "-Q activates the Query Actions")
group.add_option("-Q", "--query", dest="query", action="store_true",
                  help="List all local packages")
group.add_option("", "--aur", dest="aur", action="store_true",
                 help="While listing all packages, check which ones are from AUR")
group.add_option("", "--loner", dest="loner", action="store_true",
                 help="Search for 'lonely' packages, means not explicitly " \
                      "installed packages, which are not required by any " \
                      "other installed package")
group.add_option("-F", "--files", dest="show_files", action="store_true",
                 help="List of all files in the given package")
group.add_option("-o", "--owns", dest="owns", action="store_true",
                 help="Look for package that contains the given file/dir/path")

parser.add_option_group(group)

group = OptionGroup(parser, "Remove Actions",
                    "-R activates the Remove Actions")
group.add_option("-R", "--remove", dest="remove", action="store_true",
                  help="Remove the given packages from the system")
group.add_option("", "--no-recu", dest="recursive_remove",
                 default="True", action="store_false",
                help="Do not recursivly remove unneeded dependencies on remove")
parser.add_option_group(group)

group = OptionGroup(parser, "Build Actions",
                    "-B activates the Build Actions")
group.add_option("-B", "--build", dest="build", action="store_true",
                 help="Build the given packages either from abs or from aur")
group.add_option("-I", "--install", dest="build_install", action="store_true",
                 help="Install the built package")
group.add_option("-e", "--edit", dest="build_edit", action="store_true",
                 help="Edit the PKGBUILD before building")
group.add_option("", "--no-cleanup", dest="build_cleanup", action="store_false",
                 default="True",
                 help="Don't cleanup (delete) the build dir before")
group.add_option("", "--no-prepare", dest="build_prepare", action="store_false",
                 default="True",
                 help="Don't prepare (download scripts and sources) the build")
parser.add_option_group(group)

group = OptionGroup(parser, "Evil Options",
                    "only --args are used in the evil opts")
group.add_option("", "--clear-pkg-cache", dest="cpc", action="store_true",
                  help="cleanup the package cache directory")
parser.add_option_group(group)

(options, args) = parser.parse_args()

events = MMacmanEvents()
config = PyALPMMConfiguration(events, options.configfile, cmd_args=options)

# uncomment this to enable logging to /tmp/alpm.log (or set events.logfile manually)
# events.logfile = config.logfile

session = Session(config)

# global exception catcher func callback
def exc_cb(type_, val, trace):
    if not issubclass(type_, (CriticalError, UserError)):
        raise type_(val)
    if issubclass(type_, CriticalError):
        print "[e] A {0} occured:".format(type_.__name__)

        import traceback
        with file("/tmp/mmacman_error.log", "w") as fd:
            for line in traceback.extract_tb(trace):
                fd.write("{0[0]} Line: {0[1]}\n   func: {0[2]}\n{0[3]}\n\n". \
                         format(line))
        print "[i] Wrote traceback to /tmp/mmacman_error.log"
    print "[e] {0}".format(val)

    import sys
    sys.exit(1)

## TODO: write correct signal handling here
def sig_cb(signal, frame):
    print "[e] Got Signal: {0}".format(signal)
    print "[e] {0}".format(frame)
    print "cannot cancel, wait till end"

system = System(session, global_exc_cb=exc_cb, global_sig_cb=sig_cb)
#system = System(session)

if options.cpc:
    print "[i] evil option detected"
    print "[i] deleting cache dirs"
    import shutil
    for path in config.cachedirs:
        shutil.rmtree(path, True)
        print "[!] deleted: {0}".format(path)

if options.cpc: # or ...
    print "[i] always exiting after an evil option"
    sys.exit()

#print "[i] You have set the following commandline options:"
if options.force:
    print "[i]     Forced transaction (-f)"
if options.nodeps:
    print "[i]     Ignoring dependencies (-d)"
if options.download_only:
    print "[i]     Download packages only (-w)"
if options.build_install:
    print "[i]     Installing the freshly built package (-I)"
if options.build_edit:
    print "[i]     Edit the PKGBUILD before makepkg (-e)"
if not options.build_cleanup:
    print "[i]     Don't cleanup build {0.build_dir} (--no-cleanup)". \
          format(config)
if not options.build_prepare:
    print "[i]     Do not prepare PackageBuilder (--no-prepare)"
if not options.recursive_remove:
    print "[i]     Do not recursivly remove dependencies on remove (--no-recu)"
if not options.transparency:
    print "[i]     Switched off the AUR transparency (--no-transparency)"
if not options.confirm:
    print "[i]     The user will not be asked for confirmation (--no-confirm)"

if options.update:
    system.update_databases()

# check for all affected options, if there is at least one positional argument
if len(args) == 0:
    if (options.query and options.owns) or (options.query and options.info):
        print "[e] you have to pass one argument to issue a query!"
        sys.exit()
    elif options.build:
        print "[e] you have to pass the name of the package you want to build!"
        sys.exit()
    elif options.upgrade or options.remove or \
         (options.sync and not options.sysupgrade):
        print "[e] you have to pass at least one package name to process!"
        sys.exit()

if options.sync and options.search:
    result = system.search_packages(args[0])
    for pkg in result:
        print "[P] {0.repo}/{0.name}-{0.version} ".format(pkg)
        print "       {0.desc}".format(pkg)

elif options.query and options.owns:
    print "[+] looking for the owner of: '{0}'".format(args[0])
    filename = args[0].startswith("/") and args[0][1:] or args[0]
    pkg = system.owner_of_file(filename)
    if pkg is None:
        print ("[-] {0} was not found in any known package, \
               only the local repository can be searched.".format(args[0]))
        sys.exit()

    print "[+] '{0}' was found in the package: {1.name}-{1.version}".\
          format(args[0], pkg)

elif options.query and options.info:
    pkg = session.db_man.get_local_package(args[0])
    if pkg is None:
        print "[-] Sorry, haven't found a match for: {0}".format(args[0])
        sys.exit()

    if options.info:
        if options.show_files:
            print "[+] Showing filelist of: {0}".format(args[0])
            for fn in pkg.files:
                print "[i] {0}".format(fn)
        else:
            print FancyPackage(pkg)

elif options.query and options.loner:
    print "[+] Starting 'lonely' package search"

    loners = system.get_unneeded_packages()
    # showing loners
    if len(loners) == 0:
        print "[+] There were no loners found on your system!"
    else:
        print "[+] I have found the following loners on your system:"
        for pkg in loners:
            print "    [i] {0.name}-{0.version}".format(pkg)

elif options.query:
    db = session.db_man
    print "[+] Listing all installed packages: "

    counter, manually_installed = 0, 0
    aur_pkgs = set()

    headers = ("AUR", "EXPLICIT", "PACKAGE")
    headers2 = ("PACKAGE", "INSTALL", "NAME and VERSION")
    if options.aur:
        print " {0[0]:<9}| {0[1]:<10}| {0[2]:<20}".format(headers)
        print " {0[0]:<9}| {0[1]:<10}| {0[2]:<20}".format(headers2)
        print ("-"*10) + "+" + ("-"*10) + "+" + ("-"*20)
    else:
        print " {0[1]:<9}| {0[2]:<20}".format(headers)
        print " {0[1]:<9}| {0[2]:<20}".format(headers2)
        print ("-"*10) + "+" + ("-"*20)

    for pkg in db.get_local_packages():
        counter += 1
        if pkg.reason == p.PM_PKG_REASON_EXPLICIT:
            manually_installed += 1
        reason_sign = "-x-" if pkg.reason == p.PM_PKG_REASON_EXPLICIT else ""

        if options.aur:
            if not db.get_package(pkg.name, repos=config.repos):
                aur_pkgs.add(pkg)
                aur_sign = "-x-"
            else:
                aur_sign = ""
            print "{0:^10}|{1:^10}| {2.name} {2.version}". \
                  format(aur_sign, reason_sign, pkg)
        else:
            print "{0:^10}| {1.name} {1.version}". \
                  format(reason_sign, pkg)

    print ("-"*10) + "+" + ("-"*10) + "+" + ("-"*20) if options.aur \
          else ("-"*10) + "+" + ("-"*20)

    print "[i] {0} packages installed!".format(counter)
    print "[i] {0} packages were installed explicitly".\
          format(manually_installed)

    if options.aur:
        regularpkgs = counter - len(aur_pkgs)
        print "[i] {0} packages from 'regular' repositories".\
              format(regularpkgs)
        print "[i] {0} packages from other repositories (AUR)".\
              format(len(aur_pkgs))
        print "[+] Listing packages from third-party repositories now:"
        for pkg in aur_pkgs:
            print "    [i] {0.name}-{0.version}".format(pkg)

elif options.upgrade:
    system.upgrade_packages(targets=args)
elif options.remove:
    system.remove_packages(targets=args, recursive=options.recursive_remove)
elif options.build:
    system.build_packages(targets=args)
elif options.sync and options.sysupgrade:
    system.sys_upgrade()
elif options.sync:
    system.sync_packages(targets=args)
else:
    if not options.update:
        parser.print_help()