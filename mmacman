#!/usr/bin/python

import os, sys
from time import time as utime
from random import choice
from optparse import OptionParser, OptionGroup

from pyalpmm import Session, PyALPMMConfiguration, Events, System
from pyalpmm.transaction import SyncTransaction, RemoveTransaction, \
     UpgradeTransaction, AURTransaction, DatabaseUpdateTransaction, \
     SysUpgradeTransaction
from pyalpmm.tools import AskUser, CriticalError, FancyPackage
from pyalpmm.pbuilder import PackageBuilder, BuildError
from pyalpmm.database import DatabaseError

import pyalpmm_raw as p


class MMacmanEvents(Events):
    def DatabaseUpToDate(self, **kw):
        print "[i] Database up to date: {0}".format(kw["repo"])

    def DatabaseUpdated(self, **kw):
        print "[+] Database updated: {0}".format(kw["repo"])

    def DatabaseUpdateError(self, **kw):
        print "[e] Database could not be updated: {0}".format(kw["repo"])

    def StartResolvingDependencies(self):
        print "[i] Resolving Dependencies..."

    def StartCheckingInterConflicts(self):
        print "[i] Checking Inter-Conflicts..."

    def StartRetrievingPackages(self, **kw):
        print "[+] Retrieving from {0}".format(kw["repo"])

    def StartUpgradingPackage(self, **kw):
        print "[+] Upgrading: {0.name}-{0.version}".format(kw["pkg"])

    def StartRemovingPackage(self, **kw):
        print "[+] Removing: {0.name}-{0.version}".format(kw["pkg"])

    def StartInstallingPackage(self, **kw):
        print "[+] Installing: {0.name}-{0.version}".format(kw["pkg"])

    def StartCheckingPackageIntegrity(self):
        print "[+] Checking package integrity..."

    def StartCheckingFileConflicts(self):
        print "[+] Checking file conflicts..."

    def StartBuild(self, **kw):
        print "[+] Starting build: {0.name}-{0.version}".format(kw["pkg"])

    def ReInstallingPackage(self, **kw):
        print "[i] Reinstalling package: {0.name}-{0.version}".format(kw["pkg"])

parser = OptionParser()
group = OptionGroup(parser, "General Options",
                    "Can be used standalone and in combination with any other options")
group.add_option("-y", "--update", dest="update", action="store_true",
                  help="Update all Databases (usable standalone, or in combination with everything)")
group.add_option("-c", "--configfile", dest="configfile", metavar="FILE",
                  help="use given file as a config file")
parser.add_option_group(group)


group = OptionGroup(parser, "Additional flags", "To be used in combination with other actions")
group.add_option("-f", "--force", dest="force", action="store_true",
                  help="force action")
group.add_option("-d", "--nodeps", dest="nodeps", action="store_true",
                  help="ignore dependencies")
group.add_option("-w", "--downloadonly", dest="download_only", action="store_true",
                  help="only download packages")
group.add_option("-i", "--info", dest="info", action="store_true",
                  help="Get info for some package. With -Q local and with -S from sync repo")
parser.add_option_group(group)

group = OptionGroup(parser, "Sync Actions",
                    "-S activates the sync actions")
group.add_option("-S", "--sync", dest="sync", action="store_true",
                  help="Synchronise package")
group.add_option("-u", "--sysupgrade", dest="sysupgrade", action="store_true",
                  help="Perform a global system upgrade")
group.add_option("-s", "--search", dest="search", action="store_true",
                  help="Search package in SyncDatabases")
parser.add_option_group(group)

group = OptionGroup(parser, "Upgrade Actions",
                    "-U activates the upgrade actions")
group.add_option("-U", "--upgrade", dest="upgrade", action="store_true",
                  help="Upgrade package")
parser.add_option_group(group)

group = OptionGroup(parser, "Query Actions",
                    "-Q activates the Query Actions")
group.add_option("-Q", "--query", dest="query", action="store_true",
                  help="List all local packages")
group.add_option("-F", "--files", dest="show_files", action="store_true",
                 help="List of all files in the given package")
group.add_option("-o", "--owns", dest="owns", action="store_true",
                 help="Look for package that contains the given file/dir/path")

parser.add_option_group(group)

group = OptionGroup(parser, "Remove Actions",
                    "-R activates the Remove Actions")
group.add_option("-R", "--remove", dest="remove", action="store_true",
                  help="Remove the given packages from the system")
parser.add_option_group(group)

group = OptionGroup(parser, "Build Actions",
                    "-B activates the Build Actions")
group.add_option("-B", "--build", dest="build", action="store_true",
                  help="Build the given packages either from abs or from aur")
group.add_option("-I", "--install", dest="build_install", action="store_true",
                  help="Install the built package")
group.add_option("-e", "--edit", dest="build_edit", action="store_true",
                  help="Edit the PKGBUILD before building")
group.add_option("", "--no-cleanup", dest="build_no_cleanup", action="store_true",
                  help="Don't cleanup (delete) the build dir before")
group.add_option("", "--no-prepare", dest="build_no_prepare", action="store_true",
                  help="Don't prepare (download scripts and sources) the build")
parser.add_option_group(group)

(options, args) = parser.parse_args()

events = MMacmanEvents()
config = PyALPMMConfiguration(
    events,
    options.configfile,
    cmd_args=options
)

# uncomment this to enable logging to /tmp/alpm.log (or set events.logfile manually)
#events.logfile = config.logfile

session = Session(config)
system = System(session)

# from now on full (global) exception catching
def exceptionhooker(exception_type, exception_value, traceback_obj):
    print "[e] A {0} occured:".format(exception_type.__name__)
    print "[e] {0}".format(exception_value)

#sys.excepthook = exceptionhooker


if options.force or options.nodeps or options.download_only:
    print "[i] You have set the following commandline options:"
    if options.force:
        print "[i]     Forced transaction (-f)"
    if options.nodeps:
        print "[i]     Ignoring dependencies (-d)"
    if options.download_only:
        print "[i]     Download packages only (-w)"
    if options.build_install:
        print "[i]     Installing the freshly built package (-I)"
    if options.build_edit:
        print "[i]     Edit the PKGBUILD before makepkg (-e)"
    if options.build_no_cleanup:
        print "[i]     Don't cleanup build {0.build_dir} (--no-cleanup)". \
              format(config)
    if options.build_no_prepare:
        print "[i]     Do not prepare PackageBuilder (--no-prepare)"

if options.update:
    system.update_databases()

if options.sync and options.search:
    result = system.search_packages(args[0])
    for pkg in result:
        print "[P] {0.repo}/{0.name}-{0.version} ".format(pkg)
        print "       {0.desc}".format(pkg)

elif options.query:
    pkg = session.db_man.get_local_package(args[0])
    if pkg is None:
        print "[-] Sorry, haven't found a match for: {0}".format(args[0])
        sys.exit()

    if options.info:
        if options.show_files:
            print "[+] Showing filelist of: {0}".format(args[0])
            for fn in pkg.files:
                print "[i] {0}".format(fn)
        else:
            print FancyPackage(pkg)
    elif options.owns:
        print "[+] looking for a package which contains: {0}".format(args[0])
        filename = args[0].startswith("/") and args[0][1:] or args[0]
        pkg = system.owner_of_file(filename)
        if pkg is None:
            print ("[-] {0} was not found in any known package, \
                   only the local repository can be searched.".format(args[0]))
            sys.exit()

        print "The file: {0} was found in the package: {1.name}-{1.version}".\
              format(filename, pkg)

elif options.upgrade:
    system.upgrade_packages(targets=args)
elif options.remove:
    system.remove_packages(targets=args)
elif options.build:
    system.build_packages(targets=args)
elif options.sync and options.sysupgrade:
    system.sys_upgrade()
else:
    system.sync_packages(targets=args)
