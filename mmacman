#!/usr/bin/python

import os, sys
from time import time as utime
from random import choice
from optparse import OptionParser

from pyalpmm.session import Session
from pyalpmm.transaction import SyncTransaction, RemoveTransaction
from pyalpmm.transaction import DatabaseUpdateTransaction, SysUpgradeTransaction
from pyalpmm.tools import AskUser, CriticalError, FancyPackage
from pyalpmm.events import Events
from pyalpmm.options import ConfigOptions

import pyalpmm_raw as p

      
class MMacmanEvents(Events):     
    
    def log(self, **v):
        pass    
            
    def ProgressDownload(self, **kw):
        pass
    
    def ProgressInstall(self, **kw):        
        pass
       
    def ProgressRemove(self, **kw):        
        pass
       
    def ProgressUpgrade(self, **kw):        
        pass
       
    def ProgressConflict(self, **kw):        
        pass
       
    def ProgressDownloadTotal(self, **kw):
        pass
    
    def DatabaseUpToDate(self, **kw):
        print "[i] Database up to date: %s" % kw["repo"]
        
    def DatabaseUpdated(self, **kw):
        print "[+] Database updated: %s" % kw["repo"]
        
    def StartResolvingDependencies(self):
        print "[i] Resolving Dependencies..."
        
    def StartCheckingInterConflicts(self):
        print "[i] Checking Inter-Conflicts..."
        
    def StartRetrievingPackages(self, **kw):
        print "[+] Retrieving from %s" % kw["repo"]
    
    def StartUpgradingPackage(self, **kw):
        print "[+] Upgrading: %s-%s"  % (kw["pkg"].name, kw["pkg"].version)
    
    def StartRemovingPackage(self, **kw):
        print "[+] Removing: %s-%s"  % (kw["pkg"].name, kw["pkg"].version)
        
    def StartInstallingPackage(self, **kw):
        print "[+] Installing: %s-%s"  % (kw["pkg"].name, kw["pkg"].version)
    
    def StartCheckingPackageIntegrity(self):
        print "[+] Checking package integrity..."
        
    def StartCheckingFileConflicts(self):
        print "[+] Checking file conflicts..."
        


parser = OptionParser()
parser.add_option("-y", "--update", dest="update", action="store_true",
                  help="Update all Databases")
parser.add_option("-S", "--sync", dest="sync", action="store_true",
                  help="Synchronise action (action based on SyncDatabases) (Install package from the internet)")
parser.add_option("-u", "--sysupgrade", dest="sysupgrade", action="store_true",
                  help="Perform a global system upgrade")
parser.add_option("-s", "--search", dest="search", action="store_true",
                  help="Search package in SyncDatabases")
parser.add_option("-Q", "--query", dest="query", action="store_true",
                  help="Query action (action based on LocalDatabase)")
parser.add_option("-i", "--info", dest="info", action="store_true",
                  help="Get info for some package")
parser.add_option("-R", "--remove", dest="remove", action="store_true",
                  help="Remove the given packages from the system")

(options, args) = parser.parse_args()

import sys

e = MMacmanEvents()
c = ConfigOptions(e)
s = Session(c)
t = None

if options.update:
    try:
        t = DatabaseUpdateTransaction(s)
        t.commit()
    except CriticalError, e:
        print "[e] %s" % e
    finally:
        if t: t.release()

if options.search and options.sync:
    #li = s.db_man.search_package(repo=s.db_man.sync_dbs.keys(), name=args[0])
    li = s.db_man.search_local_package(name=args[0])
    print "[i] Searchresults:"
    for p in li:
        print "[i] %s-%s " % (p.name, p.version)
        print "       %s" % p.desc

elif (options.query or options.sync) and options.info:
    #res = s.db_man.get_package(args[0], repo=self.db_man.local_dbs.keys() if options.query else self.db_man.sync_dbs.keys())
    if options.query:
        res = s.db_man.get_local_package(args[0])
    else:
        res = s.db_man.get_sync_package(args[0])
    
    print FancyPackage(res) if res else "[-] not found"

elif options.sync or options.remove:
    try:
        if options.sync and options.sysupgrade:
            t = SysUpgradeTransaction(s)
        elif options.sync or options.remove:
            t = SyncTransaction(s) if options.sync \
                else RemoveTransaction(s)
            t.set_targets(args)
        t.prepare()
        print "[i] Processing the following packages:"
        print "[i]   %s" % (", ".join("%s-%s" % (p.name, p.version) for p in t.get_targets()))
        t.commit()
    except CriticalError, e:
        print "[e] %s " % e
    finally:
        if t: t.release()
else:
    print "[-] not recognised commandline options, try -h"

