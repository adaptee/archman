#!/usr/bin/python

import os, sys
from time import time as utime
from random import choice
from optparse import OptionParser

from pyalpmm.session import Session
from pyalpmm.transaction import SyncTransaction, RemoveTransaction
from pyalpmm.transaction import DatabaseUpdateTransaction, SysUpgradeTransaction
from pyalpmm.tools import AskUser, CriticalError, FancyPackage
from pyalpmm.events import Events
from pyalpmm.options import ConfigOptions

import pyalpmm_raw as p

      
class MMacmanEvents(Events):     
    def DatabaseUpToDate(self, **kw):
        print "[i] Database up to date: %s" % kw["repo"]
        
    def DatabaseUpdated(self, **kw):
        print "[+] Database updated: %s" % kw["repo"]
        
    def StartResolvingDependencies(self):
        print "[i] Resolving Dependencies..."
        
    def StartCheckingInterConflicts(self):
        print "[i] Checking Inter-Conflicts..."
        
    def StartRetrievingPackages(self, **kw):
        print "[+] Retrieving from %s" % kw["repo"]
    
    def StartUpgradingPackage(self, **kw):
        print "[+] Upgrading: %s-%s"  % (kw["pkg"].name, kw["pkg"].version)
    
    def StartRemovingPackage(self, **kw):
        print "[+] Removing: %s-%s"  % (kw["pkg"].name, kw["pkg"].version)
        
    def StartInstallingPackage(self, **kw):
        print "[+] Installing: %s-%s"  % (kw["pkg"].name, kw["pkg"].version)
    
    def StartCheckingPackageIntegrity(self):
        print "[+] Checking package integrity..."
        
    def StartCheckingFileConflicts(self):
        print "[+] Checking file conflicts..."
        


parser = OptionParser()
parser.add_option("-y", "--update", dest="update", action="store_true",
                  help="Update all Databases (usable standalone, or in combination with everything)")
parser.add_option("-x", "--delete-lock", dest="delete_lockfile", action="store_true",
                  help="Deleting the database lockfile " +
                       "(ATTENTION - use only if you know what you are doing!" +
                       " usable standalone and in combination with everything)")
                  
parser.add_option("-S", "--sync", dest="sync", action="store_true",
                  help="Synchronise action (Sync package)")
parser.add_option("-u", "--sysupgrade", dest="sysupgrade", action="store_true",
                  help="Perform a global system upgrade")
parser.add_option("-s", "--search", dest="search", action="store_true",
                  help="Search package in SyncDatabases")
                  
parser.add_option("-Q", "--query", dest="query", action="store_true",
                  help="Local query action")
parser.add_option("-i", "--info", dest="info", action="store_true",
                  help="Get info for some package")
                  
parser.add_option("-R", "--remove", dest="remove", action="store_true",
                  help="Remove the given packages from the system")
                  

parser.add_option("-c", "--configfile", dest="configfile", metavar="FILE",
                  help="use given file as a config file")

(options, args) = parser.parse_args()

events = MMacmanEvents()
config = ConfigOptions(events, fn=options.configfile)

# uncomment this to enable logging to /tmp/alpm.log (or set events.logfile manually)
#events.logfile = config.logfile

session = Session(config)

if options.delete_lockfile:
    if config.rights != "root":
        print "[e] You must be root to delete the database lockfile: %s" % config.lockfile
        
    if os.path.exists(config.lockfile):
        os.unlink(config.lockfile)
        print "[+] Successfully deleted the db_lock_file: %s" % config.lockfile
    else:
        print "[-] There is no need to delete the db_lock_file: %s" % config.lockfile

if options.update:
    try:
        with DatabaseUpdateTransaction(session) as transobj:
            transobj.aquire()
            transobj.commit()
    except CriticalError as e:
        print "[e] %s" % e

if options.search and options.sync:
    gen = session.db_man.search_local_package(name=args[0])
    print "[i] Searchresults:"
    for p in gen:
        print "[P] %s-%s " % (p.name, p.version)
        print "       %s" % p.desc

elif (options.query or options.sync) and options.info:
    if options.query:
        res = session.db_man.get_local_package(args[0])
    else:
        res = session.db_man.get_sync_package(args[0])
    
    print FancyPackage(res) if res else "[-] not found"

elif options.remove or options.sync:
    
    if options.remove:
        transobj = RemoveTransaction(session, targets=args)
    elif options.sync and not options.sysupgrade:
        transobj = SyncTransaction(session, targets=args)
    else:
        transobj = SysUpgradeTransaction(session)
    
    try:
        with transobj:
            transobj.aquire()
            print "[i] Processing packages:"
            print "    %s" % ", ".join("%s-%s" % (x.name, x.version) for x in transobj.get_targets())
            transobj.commit()
    except CriticalError as e:
        print "[e] %s" % e

else:
    print "[-] not recognised commandline options, try -h"

